// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//
// BEGIN next-auth
//
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  fitbitId      String?        @unique
  fitbitAccount FitbitAccount? @relation(fields: [fitbitId], references: [id])
  workouts      Workout[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

//
// END next-auth
//

model FitbitAccount {
  id    String @id
  token String
  user  User?
}

model Workout {
  id          String  @id @default(cuid())
  fitbitLogId String?
  userId      String
  user        User    @relation(fields: [userId], references: [id])

  // Objective Workout Data
  startTime             DateTime?
  activeDurationSeconds Float?
  distance              Float?
  elevation             Float?
  paceMinPerMile        Float?
  avgHeartRate          Int?

  // Descriptions
  modality          WorkoutModality?
  workoutType       WorkoutType?
  description       String?
  location          String?
  listening         String?
  strengthExercises String?
  personalFeelings  String?

  // Ratings
  ratingEnergy     Int?
  ratingDifficulty Int?
  ratingGeneral    Int?
}

enum WorkoutModality {
  RUN
  BIKE
  INLINE_SKATE
  HIKE
  SPINNING
  ELLIPTICAL
  TREADMILL
  SPORT
  OTHER
}

enum WorkoutType {
  LONG
  SPEED
  TEMPO
  VERTICAL
  RECOVERY
  BASE
  CROSSTRAIN
}
